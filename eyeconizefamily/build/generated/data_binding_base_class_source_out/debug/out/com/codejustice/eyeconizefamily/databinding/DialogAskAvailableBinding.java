// Generated by view binder compiler. Do not edit!
package com.codejustice.eyeconizefamily.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.codejustice.eyeconizefamily.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogAskAvailableBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button availableButtonAsk;

  @NonNull
  public final ConstraintLayout constraintLayout;

  @NonNull
  public final TextView messageContentAskAvailable;

  @NonNull
  public final TextView textView;

  @NonNull
  public final TextView textView2;

  @NonNull
  public final Button unavailableButtonAsk;

  private DialogAskAvailableBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button availableButtonAsk, @NonNull ConstraintLayout constraintLayout,
      @NonNull TextView messageContentAskAvailable, @NonNull TextView textView,
      @NonNull TextView textView2, @NonNull Button unavailableButtonAsk) {
    this.rootView = rootView;
    this.availableButtonAsk = availableButtonAsk;
    this.constraintLayout = constraintLayout;
    this.messageContentAskAvailable = messageContentAskAvailable;
    this.textView = textView;
    this.textView2 = textView2;
    this.unavailableButtonAsk = unavailableButtonAsk;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAskAvailableBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAskAvailableBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_ask_available, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAskAvailableBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.available_button_ask;
      Button availableButtonAsk = ViewBindings.findChildViewById(rootView, id);
      if (availableButtonAsk == null) {
        break missingId;
      }

      id = R.id.constraintLayout;
      ConstraintLayout constraintLayout = ViewBindings.findChildViewById(rootView, id);
      if (constraintLayout == null) {
        break missingId;
      }

      id = R.id.message_content_ask_available;
      TextView messageContentAskAvailable = ViewBindings.findChildViewById(rootView, id);
      if (messageContentAskAvailable == null) {
        break missingId;
      }

      id = R.id.textView;
      TextView textView = ViewBindings.findChildViewById(rootView, id);
      if (textView == null) {
        break missingId;
      }

      id = R.id.textView2;
      TextView textView2 = ViewBindings.findChildViewById(rootView, id);
      if (textView2 == null) {
        break missingId;
      }

      id = R.id.unavailable_button_ask;
      Button unavailableButtonAsk = ViewBindings.findChildViewById(rootView, id);
      if (unavailableButtonAsk == null) {
        break missingId;
      }

      return new DialogAskAvailableBinding((ConstraintLayout) rootView, availableButtonAsk,
          constraintLayout, messageContentAskAvailable, textView, textView2, unavailableButtonAsk);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
